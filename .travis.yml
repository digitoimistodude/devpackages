# Travis CI (MIT License) configuration file for devpackages
# @link https://travis-ci.org/

# For use with the devpackages.
# @link https://github.com/digitoimistodude/devpackages

# Ditch sudo and use containers.
# @link https://docs.travis-ci.com/user/migrating-from-legacy/#Why-migrate-to-container-based-infrastructure%3F
# @link https://docs.travis-ci.com/user/workers/container-based-infrastructure/#Routing-your-build-to-container-based-infrastructure
sudo: required
dist: xenial

# Declare project language.
# @link https://about.travis-ci.org/docs/user/languages/php/
language: php

# Declare versions of PHP to use. Use one decimal max.
# @link https://docs.travis-ci.com/user/build-configuration/
matrix:
    fast_finish: true

# Use this to prepare the system to install prerequisites or dependencies.
# e.g. sudo apt-get update.
# Failures in this section will result in build status 'errored'.
before_install:
    - sudo rm -rf ~/.nvm
    - curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash -
    - sudo apt-get install -y nodejs
    - if [[ `node -v` != v10* ]]; then nvm install stable; fi
    - nvm install-latest-npm
    - nvm install 10.22.0
    - nvm use 10.22.0

# Use this to prepare your build for testing.
# e.g. copy database configurations, environment variables, etc.
# Failures in this section will result in build status 'errored'.
before_script:
    - if [[ "$SNIFF" == "1" ]]; then wget https://raw.githubusercontent.com/digitoimistodude/devpackages/master/.eslintrc.js; fi
    - if [[ "$SNIFF" == "1" ]]; then npm i -g eslint; fi

# Run test script commands.
# Default is specific to project language.
# All commands must exit with code 0 on success. Anything else is considered failure.
script:
    - if [[ "$SNIFF" == "1" ]]; then npm i --save-dev eslint babel-eslint babel-loader babel-preset-airbnb eslint-config-airbnb eslint-plugin-import eslint-plugin-jsx-a11y eslint-plugin-react eslint-plugin-react-hooks; fi
    - if [[ "$SNIFF" == "1" ]]; then npm i --save airbnb-browser-shims; fi
    - if [[ "$SNIFF" == "1" ]]; then npm link eslint; fi
    - if [[ "$SNIFF" == "1" ]]; then eslint .; fi
    # Run against WordPress Coding Standards.
    # If you use a custom ruleset, change `--standard=WordPress` to point to your ruleset file,
    # for example: `--standard=wpcs.xml`.
    # You can use any of the normal PHPCS command line arguments in the command:
    # https://github.com/squizlabs/PHP_CodeSniffer/wiki/Usage
    - if [[ "$SNIFF" == "1" ]]; then $PHPCS_DIR/bin/phpcs -p . --ignore=node_modules,*/css/* --standard=phpcs.xml; fi
    # Run the theme through stylelint.
    - if [[ "$SNIFF" == "1" ]]; then npm i --save-dev postcss stylelint stylelint-a11y stylelint-order stylelint-config-recommended stylelint-config-standard stylelint-declaration-use-variable stylelint-order stylelint-scss stylelint-value-no-unknown-custom-properties; fi
    - if [[ "$SNIFF" == "1" ]]; then npm link postcss; fi
    - if [[ "$SNIFF" == "1" ]]; then npm link stylelint; fi
    - if [[ "$SNIFF" == "1" ]]; then stylelint .; fi

# Receive notifications for build results.
# @link https://docs.travis-ci.com/user/notifications/#Email-notifications
notifications:
    email: false
